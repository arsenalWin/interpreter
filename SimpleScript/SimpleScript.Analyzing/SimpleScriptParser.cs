// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  Ð¡À¼
// DateTime: 2017/12/2 23:26:10
// UserName: stern
// Input file <SimpleScriptParser.y - 2011/1/10 23:06:18>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleScript.RunTime;

namespace SimpleScript.Analyzing
{
public enum Tokens {error=2,EOF=3,COMMENT=4,IDENTIFIER=5,INTEGER_LITERAL=6,
    DOUBLE_LITERAL=7,BOOL_LITERAL=8,STRING_LITERAL=9,EOL=10,DIM=11,BOOL=12,
    INT=13,STRING=14,DOUBLE=15,AS=16,BEGIN=17,END=18,
    PRINT=19,INPUT=20,FOR=21,TO=22,NEXT=23,WHILE=24,
    DO=25,IF=26,THEN=27,ELSE=28,FI=29,OP_RIGHT_PAR=30,
    OP_LEFT_PAR=31,OP_ASSIGN=32,OP_ADD=33,OP_MINUS=34,OP_MUL=35,OP_DIV=36,
    OP_MODUL=37,OP_AND=38,OP_OR=39,OP_NOT=40,OP_EQU=41,OP_NOT_EQU=42,
    OP_LT=43,OP_GT=44,OP_GT_EQ=45,OP_LT_EQ=46};

public struct ValueType
#line 12 "SimpleScriptParser.y"
       {
    public long Integer;
    public string String;
    public double Double;
	public bool Bool;
	public Expression expr;
	public StatementList statementList;
	public IStatement  statement;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleScriptParser.y - 2011/1/10 23:06:18
#line 6 "SimpleScriptParser.y"
	SymbolTable symTable = SymbolTable.GetInstance;
	public StatementList program = new StatementList();
#line default
  // End verbatim content from SimpleScriptParser.y - 2011/1/10 23:06:18

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[55];
  private static State[] states = new State[107];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "statementList", "statement", "varDecl", "assignOp", 
      "printOp", "inputOp", "forLoop", "ifCond", "whileLoop", "Expr", "Literal", 
      "forBody", "ifBody", "else", "elseBody", "whileBody", };

  static Parser() {
    states[0] = new State(new int[]{17,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{10,4});
    states[4] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,10,-3},new int[]{-3,5,-4,104,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[5] = new State(new int[]{10,6});
    states[6] = new State(new int[]{18,7,11,10,5,18,19,61,20,64,21,67,26,79,24,94},new int[]{-4,8,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[7] = new State(-2);
    states[8] = new State(-5);
    states[9] = new State(-6);
    states[10] = new State(new int[]{5,11});
    states[11] = new State(new int[]{16,12});
    states[12] = new State(new int[]{13,13,15,14,12,15,14,16});
    states[13] = new State(-13);
    states[14] = new State(-14);
    states[15] = new State(-15);
    states[16] = new State(-16);
    states[17] = new State(-7);
    states[18] = new State(new int[]{32,19});
    states[19] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,20,-13,52});
    states[20] = new State(new int[]{33,21,34,23,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-17});
    states[21] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,22,-13,52});
    states[22] = new State(new int[]{33,-21,34,-21,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-21,30,-21,22,-21});
    states[23] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,24,-13,52});
    states[24] = new State(new int[]{33,-22,34,-22,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-22,30,-22,22,-22});
    states[25] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,26,-13,52});
    states[26] = new State(new int[]{33,-24,34,-24,35,-24,36,-24,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-24,30,-24,22,-24});
    states[27] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,28,-13,52});
    states[28] = new State(new int[]{33,-25,34,-25,35,-25,36,-25,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-25,30,-25,22,-25});
    states[29] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,30,-13,52});
    states[30] = new State(new int[]{33,-26,34,-26,35,-26,36,-26,37,-26,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-26,30,-26,22,-26});
    states[31] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,32,-13,52});
    states[32] = new State(new int[]{33,-27,34,-27,35,-27,36,-27,37,-27,38,-27,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-27,30,-27,22,-27});
    states[33] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,34,-13,52});
    states[34] = new State(new int[]{33,-28,34,-28,35,-28,36,-28,37,-28,38,-28,39,-28,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-28,30,-28,22,-28});
    states[35] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,36,-13,52});
    states[36] = new State(new int[]{33,-29,34,-29,35,-29,36,-29,37,-29,38,-29,39,-29,40,-29,41,37,42,39,43,41,44,43,45,45,46,47,10,-29,30,-29,22,-29});
    states[37] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,38,-13,52});
    states[38] = new State(new int[]{33,-30,34,-30,35,-30,36,-30,37,-30,38,-30,39,-30,40,-30,41,-30,42,39,43,41,44,43,45,45,46,47,10,-30,30,-30,22,-30});
    states[39] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,40,-13,52});
    states[40] = new State(new int[]{33,-31,34,-31,35,-31,36,-31,37,-31,38,-31,39,-31,40,-31,41,-31,42,-31,43,41,44,43,45,45,46,47,10,-31,30,-31,22,-31});
    states[41] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,42,-13,52});
    states[42] = new State(new int[]{33,-32,34,-32,35,-32,36,-32,37,-32,38,-32,39,-32,40,-32,41,-32,42,-32,43,-32,44,43,45,45,46,47,10,-32,30,-32,22,-32});
    states[43] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,44,-13,52});
    states[44] = new State(new int[]{33,-33,34,-33,35,-33,36,-33,37,-33,38,-33,39,-33,40,-33,41,-33,42,-33,43,-33,44,-33,45,45,46,47,10,-33,30,-33,22,-33});
    states[45] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,46,-13,52});
    states[46] = new State(new int[]{33,-34,34,-34,35,-34,36,-34,37,-34,38,-34,39,-34,40,-34,41,-34,42,-34,43,-34,44,-34,45,-34,46,47,10,-34,30,-34,22,-34});
    states[47] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,48,-13,52});
    states[48] = new State(-35);
    states[49] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,50,-13,52});
    states[50] = new State(new int[]{30,51,33,21,34,23,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47});
    states[51] = new State(-18);
    states[52] = new State(-19);
    states[53] = new State(-36);
    states[54] = new State(-37);
    states[55] = new State(-38);
    states[56] = new State(-39);
    states[57] = new State(-20);
    states[58] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,59,-13,52});
    states[59] = new State(new int[]{33,-23,34,-23,35,-23,36,-23,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-23,30,-23,22,-23});
    states[60] = new State(-8);
    states[61] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,62,-13,52});
    states[62] = new State(new int[]{33,21,34,23,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47,10,-40});
    states[63] = new State(-9);
    states[64] = new State(new int[]{5,65});
    states[65] = new State(-41);
    states[66] = new State(-10);
    states[67] = new State(new int[]{5,68});
    states[68] = new State(new int[]{32,69});
    states[69] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,70,-13,52});
    states[70] = new State(new int[]{22,71,33,21,34,23,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47});
    states[71] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,72,-13,52});
    states[72] = new State(new int[]{10,73,33,21,34,23,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47});
    states[73] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,23,-43,10,-3},new int[]{-14,74,-3,76,-4,104,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[74] = new State(new int[]{23,75});
    states[75] = new State(-42);
    states[76] = new State(new int[]{10,77});
    states[77] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,23,-44},new int[]{-4,8,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[78] = new State(-11);
    states[79] = new State(new int[]{31,80});
    states[80] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,81,-13,52});
    states[81] = new State(new int[]{30,82,33,21,34,23,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47});
    states[82] = new State(new int[]{27,83});
    states[83] = new State(new int[]{10,84});
    states[84] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,28,-46,29,-46,10,-3},new int[]{-15,85,-3,105,-4,104,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[85] = new State(new int[]{28,88,29,-48},new int[]{-16,86});
    states[86] = new State(new int[]{29,87});
    states[87] = new State(-45);
    states[88] = new State(new int[]{10,89});
    states[89] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,29,-50,10,-3},new int[]{-17,90,-3,91,-4,104,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[90] = new State(-49);
    states[91] = new State(new int[]{10,92});
    states[92] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,29,-51},new int[]{-4,8,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[93] = new State(-12);
    states[94] = new State(new int[]{31,95});
    states[95] = new State(new int[]{31,49,9,53,8,54,6,55,7,56,5,57,34,58},new int[]{-12,96,-13,52});
    states[96] = new State(new int[]{30,97,33,21,34,23,35,25,36,27,37,29,38,31,39,33,40,35,41,37,42,39,43,41,44,43,45,45,46,47});
    states[97] = new State(new int[]{25,98});
    states[98] = new State(new int[]{10,99});
    states[99] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,23,-53,10,-3},new int[]{-18,100,-3,102,-4,104,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[100] = new State(new int[]{23,101});
    states[101] = new State(-52);
    states[102] = new State(new int[]{10,103});
    states[103] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,23,-54},new int[]{-4,8,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});
    states[104] = new State(-4);
    states[105] = new State(new int[]{10,106});
    states[106] = new State(new int[]{11,10,5,18,19,61,20,64,21,67,26,79,24,94,28,-47,29,-47},new int[]{-4,8,-5,9,-6,17,-7,60,-8,63,-9,66,-10,78,-11,93});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{17,10,-3,10,18});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,10,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-4, new int[]{-7});
    rules[9] = new Rule(-4, new int[]{-8});
    rules[10] = new Rule(-4, new int[]{-9});
    rules[11] = new Rule(-4, new int[]{-10});
    rules[12] = new Rule(-4, new int[]{-11});
    rules[13] = new Rule(-5, new int[]{11,5,16,13});
    rules[14] = new Rule(-5, new int[]{11,5,16,15});
    rules[15] = new Rule(-5, new int[]{11,5,16,12});
    rules[16] = new Rule(-5, new int[]{11,5,16,14});
    rules[17] = new Rule(-6, new int[]{5,32,-12});
    rules[18] = new Rule(-12, new int[]{31,-12,30});
    rules[19] = new Rule(-12, new int[]{-13});
    rules[20] = new Rule(-12, new int[]{5});
    rules[21] = new Rule(-12, new int[]{-12,33,-12});
    rules[22] = new Rule(-12, new int[]{-12,34,-12});
    rules[23] = new Rule(-12, new int[]{34,-12});
    rules[24] = new Rule(-12, new int[]{-12,35,-12});
    rules[25] = new Rule(-12, new int[]{-12,36,-12});
    rules[26] = new Rule(-12, new int[]{-12,37,-12});
    rules[27] = new Rule(-12, new int[]{-12,38,-12});
    rules[28] = new Rule(-12, new int[]{-12,39,-12});
    rules[29] = new Rule(-12, new int[]{-12,40,-12});
    rules[30] = new Rule(-12, new int[]{-12,41,-12});
    rules[31] = new Rule(-12, new int[]{-12,42,-12});
    rules[32] = new Rule(-12, new int[]{-12,43,-12});
    rules[33] = new Rule(-12, new int[]{-12,44,-12});
    rules[34] = new Rule(-12, new int[]{-12,45,-12});
    rules[35] = new Rule(-12, new int[]{-12,46,-12});
    rules[36] = new Rule(-13, new int[]{9});
    rules[37] = new Rule(-13, new int[]{8});
    rules[38] = new Rule(-13, new int[]{6});
    rules[39] = new Rule(-13, new int[]{7});
    rules[40] = new Rule(-7, new int[]{19,-12});
    rules[41] = new Rule(-8, new int[]{20,5});
    rules[42] = new Rule(-9, new int[]{21,5,32,-12,22,-12,10,-14,23});
    rules[43] = new Rule(-14, new int[]{});
    rules[44] = new Rule(-14, new int[]{-3,10});
    rules[45] = new Rule(-10, new int[]{26,31,-12,30,27,10,-15,-16,29});
    rules[46] = new Rule(-15, new int[]{});
    rules[47] = new Rule(-15, new int[]{-3,10});
    rules[48] = new Rule(-16, new int[]{});
    rules[49] = new Rule(-16, new int[]{28,10,-17});
    rules[50] = new Rule(-17, new int[]{});
    rules[51] = new Rule(-17, new int[]{-3,10});
    rules[52] = new Rule(-11, new int[]{24,31,-12,30,25,10,-18,23});
    rules[53] = new Rule(-18, new int[]{});
    rules[54] = new Rule(-18, new int[]{-3,10});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> BEGIN, EOL, statementList, EOL, END
#line 77 "SimpleScriptParser.y"
                                            {program = ValueStack[ValueStack.Depth-3].statementList;}
#line default
        break;
      case 3: // statementList -> /* empty */
#line 80 "SimpleScriptParser.y"
                          {if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}}
#line default
        break;
      case 4: // statementList -> statement
#line 82 "SimpleScriptParser.y"
                {	if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}
									CurrentSemanticValue.statementList.InsertFront(ValueStack[ValueStack.Depth-1].statement);
									
								}
#line default
        break;
      case 5: // statementList -> statementList, EOL, statement
#line 86 "SimpleScriptParser.y"
                                  { ValueStack[ValueStack.Depth-3].statementList.Add(ValueStack[ValueStack.Depth-1].statement); CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-3].statementList; }
#line default
        break;
      case 6: // statement -> varDecl
#line 90 "SimpleScriptParser.y"
                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 7: // statement -> assignOp
#line 91 "SimpleScriptParser.y"
              { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 8: // statement -> printOp
#line 92 "SimpleScriptParser.y"
              { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 9: // statement -> inputOp
#line 93 "SimpleScriptParser.y"
              { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 10: // statement -> forLoop
#line 94 "SimpleScriptParser.y"
              { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 11: // statement -> ifCond
#line 95 "SimpleScriptParser.y"
             { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 12: // statement -> whileLoop
#line 96 "SimpleScriptParser.y"
               { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 13: // varDecl -> DIM, IDENTIFIER, AS, INT
#line 99 "SimpleScriptParser.y"
                                  {int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Integer); CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
#line default
        break;
      case 14: // varDecl -> DIM, IDENTIFIER, AS, DOUBLE
#line 100 "SimpleScriptParser.y"
                              {int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Double);  CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
#line default
        break;
      case 15: // varDecl -> DIM, IDENTIFIER, AS, BOOL
#line 101 "SimpleScriptParser.y"
                             {int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Boolean); CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
#line default
        break;
      case 16: // varDecl -> DIM, IDENTIFIER, AS, STRING
#line 102 "SimpleScriptParser.y"
                              {int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.String);  CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
#line default
        break;
      case 17: // assignOp -> IDENTIFIER, OP_ASSIGN, Expr
#line 106 "SimpleScriptParser.y"
                                      {CurrentSemanticValue.statement = new AssignmentStatement(symTable.GetID(ValueStack[ValueStack.Depth-3].String), ValueStack[ValueStack.Depth-1].expr);}
#line default
        break;
      case 18: // Expr -> OP_LEFT_PAR, Expr, OP_RIGHT_PAR
#line 140 "SimpleScriptParser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-2].expr; }
#line default
        break;
      case 19: // Expr -> Literal
#line 141 "SimpleScriptParser.y"
                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 20: // Expr -> IDENTIFIER
#line 142 "SimpleScriptParser.y"
                    { CurrentSemanticValue.expr = new Expression(symTable.Get(ValueStack[ValueStack.Depth-1].String));}
#line default
        break;
      case 21: // Expr -> Expr, OP_ADD, Expr
#line 143 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.Add,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 22: // Expr -> Expr, OP_MINUS, Expr
#line 144 "SimpleScriptParser.y"
                          { CurrentSemanticValue.expr = new Expression(Operation.Sub,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 23: // Expr -> OP_MINUS, Expr
#line 145 "SimpleScriptParser.y"
                                { CurrentSemanticValue.expr = new Expression(Operation.UnaryMinus,null,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 24: // Expr -> Expr, OP_MUL, Expr
#line 146 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.Mul,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 25: // Expr -> Expr, OP_DIV, Expr
#line 147 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.Div,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 26: // Expr -> Expr, OP_MODUL, Expr
#line 148 "SimpleScriptParser.y"
                          { CurrentSemanticValue.expr = new Expression(Operation.Modul,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 27: // Expr -> Expr, OP_AND, Expr
#line 149 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.And,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 28: // Expr -> Expr, OP_OR, Expr
#line 150 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.Or,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 29: // Expr -> Expr, OP_NOT, Expr
#line 151 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.Not,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 30: // Expr -> Expr, OP_EQU, Expr
#line 152 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.Equ,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 31: // Expr -> Expr, OP_NOT_EQU, Expr
#line 153 "SimpleScriptParser.y"
                           { CurrentSemanticValue.expr = new Expression(Operation.NotEqu,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 32: // Expr -> Expr, OP_LT, Expr
#line 154 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.Lt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 33: // Expr -> Expr, OP_GT, Expr
#line 155 "SimpleScriptParser.y"
                        { CurrentSemanticValue.expr = new Expression(Operation.Gt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 34: // Expr -> Expr, OP_GT_EQ, Expr
#line 156 "SimpleScriptParser.y"
                          { CurrentSemanticValue.expr = new Expression(Operation.GtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 35: // Expr -> Expr, OP_LT_EQ, Expr
#line 157 "SimpleScriptParser.y"
                          { CurrentSemanticValue.expr = new Expression(Operation.LtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 36: // Literal -> STRING_LITERAL
#line 160 "SimpleScriptParser.y"
                          {CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].String);}
#line default
        break;
      case 37: // Literal -> BOOL_LITERAL
#line 161 "SimpleScriptParser.y"
                  {CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Bool);}
#line default
        break;
      case 38: // Literal -> INTEGER_LITERAL
#line 162 "SimpleScriptParser.y"
                     {CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Integer);}
#line default
        break;
      case 39: // Literal -> DOUBLE_LITERAL
#line 163 "SimpleScriptParser.y"
                    {CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Double);}
#line default
        break;
      case 40: // printOp -> PRINT, Expr
#line 166 "SimpleScriptParser.y"
                      {CurrentSemanticValue.statement = new PrintStatement(ValueStack[ValueStack.Depth-1].expr);}
#line default
        break;
      case 41: // inputOp -> INPUT, IDENTIFIER
#line 169 "SimpleScriptParser.y"
                            {CurrentSemanticValue.statement = new InputStatement(symTable.GetID(ValueStack[ValueStack.Depth-1].String));}
#line default
        break;
      case 42: // forLoop -> FOR, IDENTIFIER, OP_ASSIGN, Expr, TO, Expr, EOL, forBody, NEXT
#line 173 "SimpleScriptParser.y"
    {CurrentSemanticValue.statement = new ForStatement(symTable.Get(ValueStack[ValueStack.Depth-8].String) as SymbolTableIntegerElement, ValueStack[ValueStack.Depth-6].expr, ValueStack[ValueStack.Depth-4].expr, ValueStack[ValueStack.Depth-2].statementList);}
#line default
        break;
      case 43: // forBody -> /* empty */
#line 176 "SimpleScriptParser.y"
                       {CurrentSemanticValue.statementList = new StatementList();}
#line default
        break;
      case 44: // forBody -> statementList, EOL
#line 177 "SimpleScriptParser.y"
                       {CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
#line default
        break;
      case 45: // ifCond -> IF, OP_LEFT_PAR, Expr, OP_RIGHT_PAR, THEN, EOL, ifBody, else, FI
#line 181 "SimpleScriptParser.y"
    {CurrentSemanticValue.statement = new IfCondStatement(ValueStack[ValueStack.Depth-7].expr,ValueStack[ValueStack.Depth-3].statementList,ValueStack[ValueStack.Depth-2].statementList);}
#line default
        break;
      case 46: // ifBody -> /* empty */
#line 184 "SimpleScriptParser.y"
                       {CurrentSemanticValue.statementList = new StatementList();}
#line default
        break;
      case 47: // ifBody -> statementList, EOL
#line 185 "SimpleScriptParser.y"
                        {CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
#line default
        break;
      case 48: // else -> /* empty */
#line 188 "SimpleScriptParser.y"
                      {CurrentSemanticValue.statementList = new StatementList();}
#line default
        break;
      case 49: // else -> ELSE, EOL, elseBody
#line 189 "SimpleScriptParser.y"
                       {CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-1].statementList;}
#line default
        break;
      case 50: // elseBody -> /* empty */
#line 192 "SimpleScriptParser.y"
                       {CurrentSemanticValue.statementList = new StatementList();}
#line default
        break;
      case 51: // elseBody -> statementList, EOL
#line 193 "SimpleScriptParser.y"
                       {CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
#line default
        break;
      case 52: // whileLoop -> WHILE, OP_LEFT_PAR, Expr, OP_RIGHT_PAR, DO, EOL, whileBody, NEXT
#line 197 "SimpleScriptParser.y"
    {CurrentSemanticValue.statement = new WhileLoopStatement(ValueStack[ValueStack.Depth-6].expr,ValueStack[ValueStack.Depth-2].statementList);}
#line default
        break;
      case 53: // whileBody -> /* empty */
#line 200 "SimpleScriptParser.y"
                        {CurrentSemanticValue.statementList = new StatementList();}
#line default
        break;
      case 54: // whileBody -> statementList, EOL
#line 201 "SimpleScriptParser.y"
                       {CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 204 "SimpleScriptParser.y"

// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
#line default
}
}
