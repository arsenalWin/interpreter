// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  Ð¡À¼
// DateTime: 2017/12/18 23:43:33
// UserName: stern
// Input file <SimpleScriptParser.y - 2017/12/18 23:43:31>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleScript.RunTime;

namespace SimpleScript.Analyzing
{
public enum Tokens {error=2,EOF=3,COMMENT=4,BEGIN=5,EOL=6,
    SEMI=7,COLON=8,COMMA=9,INTEGER_LITERAL=10,DOUBLE_LITERAL=11,BOOL_LITERAL=12,
    STRING_LITERAL=13,JOINT=14,LINEAR=15,CIRCULAR=16,ARC=17,START=18,
    WEAVE=19,REGISTER=20,POS_REGISTER=21,DOUT=22,DIN=23,FINE=24,
    CNT=25,WJNT=26,OFFSET=27,CONDITION=28,SKIP=29,ACC=30,
    SEC=31,LABEL=32,JUMP=33,CALL=34,PULSE=35,IF=36,
    SELECT=37,ELSE=38,MAIN=39,POS_=40,END=41,PERCENT=42,
    MM_SEC=43,CM_MIN=44,INCH_MIN=45,DEG_SEC=46,OP_RIGHT_PAR=47,OP_LEFT_PAR=48,
    OP_LEFT_BRA=49,OP_RIGHT_BRA=50,OP_LEFT_BIG=51,OP_RIGHT_BIG=52,OP_ASSIGN=53,OP_ADD=54,
    OP_MINUS=55,OP_MUL=56,OP_CHU=57,OP_MOD=58,OP_DIV=59,OP_AND=60,
    OP_OR=61,OP_EQU=62,OP_NOT_EQU=63,OP_LT=64,OP_GT=65,OP_GT_EQ=66,
    OP_LT_EQ=67,POS=68,GROUP=69,DEG=70,MM=71,UT=72,
    UF=73,CONFIG=74,J1=75,J2=76,J3=77,J4=78,
    J5=79,J6=80,X=81,Y=82,Z=83,W=84,
    P=85,PROGRAM_NAME=86};

public struct ValueType
#line 12 "SimpleScriptParser.y"
       {
    public long Integer;
    public string String;
    public double Double;
	public bool Bool;
	public Expression expr;
	public StatementList statementList;
	public IStatement  statement;
	public MoveSpeed moveSpeed;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleScriptParser.y - 2017/12/18 23:43:31
#line 6 "SimpleScriptParser.y"
	SymbolTable symTable = SymbolTable.GetInstance;
	public StatementList program = new StatementList();
#line default
  // End verbatim content from SimpleScriptParser.y - 2017/12/18 23:43:31

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[18];
  private static State[] states = new State[76];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "statementList", "posInfoList", "statement", "moveStatement", 
      "moveSpeed", "moveFine", "posInfo", };

  static Parser() {
    states[0] = new State(new int[]{5,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{6,4});
    states[4] = new State(new int[]{14,63,6,-3},new int[]{-3,5,-5,75,-6,62});
    states[5] = new State(new int[]{6,6});
    states[6] = new State(new int[]{40,7,14,63},new int[]{-5,61,-6,62});
    states[7] = new State(new int[]{68,12,41,-14,6,-14},new int[]{-4,8,-9,60});
    states[8] = new State(new int[]{41,9,6,10});
    states[9] = new State(-2);
    states[10] = new State(new int[]{68,12},new int[]{-9,11});
    states[11] = new State(-16);
    states[12] = new State(new int[]{51,13});
    states[13] = new State(new int[]{6,14});
    states[14] = new State(new int[]{69,15});
    states[15] = new State(new int[]{8,16});
    states[16] = new State(new int[]{6,17});
    states[17] = new State(new int[]{73,18});
    states[18] = new State(new int[]{8,19});
    states[19] = new State(new int[]{10,20});
    states[20] = new State(new int[]{9,21});
    states[21] = new State(new int[]{72,22});
    states[22] = new State(new int[]{8,23});
    states[23] = new State(new int[]{10,24});
    states[24] = new State(new int[]{9,25});
    states[25] = new State(new int[]{6,26});
    states[26] = new State(new int[]{75,27});
    states[27] = new State(new int[]{53,28});
    states[28] = new State(new int[]{11,29});
    states[29] = new State(new int[]{70,30});
    states[30] = new State(new int[]{9,31});
    states[31] = new State(new int[]{76,32});
    states[32] = new State(new int[]{53,33});
    states[33] = new State(new int[]{11,34});
    states[34] = new State(new int[]{70,35});
    states[35] = new State(new int[]{9,36});
    states[36] = new State(new int[]{77,37});
    states[37] = new State(new int[]{53,38});
    states[38] = new State(new int[]{11,39});
    states[39] = new State(new int[]{70,40});
    states[40] = new State(new int[]{9,41});
    states[41] = new State(new int[]{6,42});
    states[42] = new State(new int[]{78,43});
    states[43] = new State(new int[]{53,44});
    states[44] = new State(new int[]{11,45});
    states[45] = new State(new int[]{70,46});
    states[46] = new State(new int[]{9,47});
    states[47] = new State(new int[]{79,48});
    states[48] = new State(new int[]{53,49});
    states[49] = new State(new int[]{11,50});
    states[50] = new State(new int[]{70,51});
    states[51] = new State(new int[]{9,52});
    states[52] = new State(new int[]{80,53});
    states[53] = new State(new int[]{53,54});
    states[54] = new State(new int[]{11,55});
    states[55] = new State(new int[]{70,56});
    states[56] = new State(new int[]{6,57});
    states[57] = new State(new int[]{51,58});
    states[58] = new State(new int[]{7,59});
    states[59] = new State(-17);
    states[60] = new State(-15);
    states[61] = new State(-5);
    states[62] = new State(-6);
    states[63] = new State(new int[]{68,64});
    states[64] = new State(new int[]{10,69},new int[]{-7,65});
    states[65] = new State(new int[]{24,68},new int[]{-8,66});
    states[66] = new State(new int[]{7,67});
    states[67] = new State(-7);
    states[68] = new State(-13);
    states[69] = new State(new int[]{42,70,43,71,44,72,45,73,46,74});
    states[70] = new State(-8);
    states[71] = new State(-9);
    states[72] = new State(-10);
    states[73] = new State(-11);
    states[74] = new State(-12);
    states[75] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{5,6,-3,6,40,-4,41});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-5});
    rules[5] = new Rule(-3, new int[]{-3,6,-5});
    rules[6] = new Rule(-5, new int[]{-6});
    rules[7] = new Rule(-6, new int[]{14,68,-7,-8,7});
    rules[8] = new Rule(-7, new int[]{10,42});
    rules[9] = new Rule(-7, new int[]{10,43});
    rules[10] = new Rule(-7, new int[]{10,44});
    rules[11] = new Rule(-7, new int[]{10,45});
    rules[12] = new Rule(-7, new int[]{10,46});
    rules[13] = new Rule(-8, new int[]{24});
    rules[14] = new Rule(-4, new int[]{});
    rules[15] = new Rule(-4, new int[]{-9});
    rules[16] = new Rule(-4, new int[]{-4,6,-9});
    rules[17] = new Rule(-9, new int[]{68,51,6,69,8,6,73,8,10,9,72,8,10,9,6,75,53,11,70,9,76,53,11,70,9,77,53,11,70,9,6,78,53,11,70,9,79,53,11,70,9,80,53,11,70,6,51,7});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> BEGIN, EOL, statementList, EOL, POS_, posInfoList, END
#line 120 "SimpleScriptParser.y"
                                                             {program = ValueStack[ValueStack.Depth-5].statementList;}
#line default
        break;
      case 3: // statementList -> /* empty */
#line 123 "SimpleScriptParser.y"
                          {if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}}
#line default
        break;
      case 4: // statementList -> statement
#line 125 "SimpleScriptParser.y"
                {	if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}
									CurrentSemanticValue.statementList.InsertFront(ValueStack[ValueStack.Depth-1].statement);
									
								}
#line default
        break;
      case 5: // statementList -> statementList, EOL, statement
#line 129 "SimpleScriptParser.y"
                                  { ValueStack[ValueStack.Depth-3].statementList.Add(ValueStack[ValueStack.Depth-1].statement); CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-3].statementList; }
#line default
        break;
      case 6: // statement -> moveStatement
#line 133 "SimpleScriptParser.y"
                           { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 7: // moveStatement -> JOINT, POS, moveSpeed, moveFine, SEMI
#line 136 "SimpleScriptParser.y"
                                                  {CurrentSemanticValue.statement = new MoveStatement(MoveTypes.Joint, ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-3].moveSpeed);}
#line default
        break;
      case 8: // moveSpeed -> INTEGER_LITERAL, PERCENT
#line 139 "SimpleScriptParser.y"
                                     {CurrentSemanticValue.moveSpeed = new MoveSpeed(ValueStack[ValueStack.Depth-2].Integer, "percent");}
#line default
        break;
      case 9: // moveSpeed -> INTEGER_LITERAL, MM_SEC
#line 140 "SimpleScriptParser.y"
                             {CurrentSemanticValue.moveSpeed = new MoveSpeed(ValueStack[ValueStack.Depth-2].Integer, "mm/sec");}
#line default
        break;
      case 10: // moveSpeed -> INTEGER_LITERAL, CM_MIN
#line 141 "SimpleScriptParser.y"
                             {CurrentSemanticValue.moveSpeed = new MoveSpeed(ValueStack[ValueStack.Depth-2].Integer, "cm/min");}
#line default
        break;
      case 11: // moveSpeed -> INTEGER_LITERAL, INCH_MIN
#line 142 "SimpleScriptParser.y"
                               {CurrentSemanticValue.moveSpeed = new MoveSpeed(ValueStack[ValueStack.Depth-2].Integer, "inch/min");}
#line default
        break;
      case 12: // moveSpeed -> INTEGER_LITERAL, DEG_SEC
#line 143 "SimpleScriptParser.y"
                              {CurrentSemanticValue.moveSpeed = new MoveSpeed(ValueStack[ValueStack.Depth-2].Integer, "deg/sec");}
#line default
        break;
      case 17: // posInfo -> POS, OP_LEFT_BIG, EOL, GROUP, COLON, EOL, UF, COLON, INTEGER_LITERAL, 
               //            COMMA, UT, COLON, INTEGER_LITERAL, COMMA, EOL, J1, OP_ASSIGN, 
               //            DOUBLE_LITERAL, DEG, COMMA, J2, OP_ASSIGN, DOUBLE_LITERAL, DEG, 
               //            COMMA, J3, OP_ASSIGN, DOUBLE_LITERAL, DEG, COMMA, EOL, J4, 
               //            OP_ASSIGN, DOUBLE_LITERAL, DEG, COMMA, J5, OP_ASSIGN, 
               //            DOUBLE_LITERAL, DEG, COMMA, J6, OP_ASSIGN, DOUBLE_LITERAL, DEG, 
               //            EOL, OP_LEFT_BIG, SEMI
#line 159 "SimpleScriptParser.y"
    { int yId = symTable.Add(ValueStack[ValueStack.Depth-48].String); symTable.SetType(yId, SimpleScriptTypes.PosInfo); 
				SymbolTablePosElement ielem = (SymbolTablePosElement)symTable.Get(yId);
				ielem.Value.Type = 0;
				ielem.Value.J1 = ValueStack[ValueStack.Depth-31].Double; ielem.Value.J2 = ValueStack[ValueStack.Depth-26].Double; ielem.Value.J3 = ValueStack[ValueStack.Depth-21].Double;
				ielem.Value.J4 = ValueStack[ValueStack.Depth-15].Double; ielem.Value.J5 = ValueStack[ValueStack.Depth-10].Double; ielem.Value.J6 = ValueStack[ValueStack.Depth-5].Double;
				}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 167 "SimpleScriptParser.y"

// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
#line default
}
}
