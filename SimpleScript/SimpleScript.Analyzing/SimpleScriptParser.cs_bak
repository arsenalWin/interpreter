// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.3
// Machine:  TIGERVAIO
// DateTime: 1/10/2011 9:40:08 PM
// UserName: Tigran
// Input file <SimpleScriptParser.y - 1/10/2011 9:38:47 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleScript.RunTime;

namespace SimpleScript.Analyzing
{
public enum Tokens {
    error=1,EOF=2,COMMENT=3,IDENTIFIER=4,INTEGER_LITERAL=5,DOUBLE_LITERAL=6,
    BOOL_LITERAL=7,STRING_LITERAL=8,EOL=9,DIM=10,BOOL=11,INT=12,
    STRING=13,DOUBLE=14,AS=15,BEGIN=16,END=17,PRINT=18,
    INPUT=19,FOR=20,TO=21,NEXT=22,IF=23,THEN=24,
    ELSE=25,FI=26,OP_RIGHT_PAR=27,OP_LEFT_PAR=28,OP_ASSIGN=29,OP_ADD=30,
    OP_MINUS=31,OP_MUL=32,OP_DIV=33,OP_AND=34,OP_OR=35,OP_NOT=36,
    OP_EQU=37,OP_NOT_EQU=38,OP_LT=39,OP_GT=40,OP_GT_EQ=41,OP_LT_EQ=42};

public struct ValueType
{
    public long Integer;
    public string String;
    public double Double;
	public bool Bool;
	public Expression expr;
	public StatementList statementList;
	public IStatement  statement;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleScriptParser.y - 1/10/2011 9:38:47 PM
	SymbolTable symTable = SymbolTable.GetInstance;
	public StatementList program = new StatementList();
  // End verbatim content from SimpleScriptParser.y - 1/10/2011 9:38:47 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[50];
  private static State[] states = new State[94];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "statementList", "statement", "varDecl", "assignOp", 
      "printOp", "inputOp", "forLoop", "ifCond", "Expr", "Literal", "forBody", 
      "ifBody", "else", "elseBody", };

  static Parser() {
    states[0] = new State(new int[]{16,3},new int[]{-1,1});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{9,4});
    states[4] = new State(new int[]{10,10,4,18,18,59,19,62,20,65,23,77,9,-3},new int[]{-3,5,-4,91,-5,9,-6,17,-7,58,-8,61,-9,64,-10,76});
    states[5] = new State(new int[]{9,6});
    states[6] = new State(new int[]{17,7,10,10,4,18,18,59,19,62,20,65,23,77},new int[]{-4,8,-5,9,-6,17,-7,58,-8,61,-9,64,-10,76});
    states[7] = new State(-2);
    states[8] = new State(-5);
    states[9] = new State(-6);
    states[10] = new State(new int[]{4,11});
    states[11] = new State(new int[]{15,12});
    states[12] = new State(new int[]{12,13,14,14,11,15,13,16});
    states[13] = new State(-12);
    states[14] = new State(-13);
    states[15] = new State(-14);
    states[16] = new State(-15);
    states[17] = new State(-7);
    states[18] = new State(new int[]{29,19});
    states[19] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,20,-12,50});
    states[20] = new State(new int[]{30,21,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-16});
    states[21] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,22,-12,50});
    states[22] = new State(new int[]{30,-20,31,-20,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-20,27,-20,21,-20});
    states[23] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,24,-12,50});
    states[24] = new State(new int[]{30,-21,31,-21,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-21,27,-21,21,-21});
    states[25] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,26,-12,50});
    states[26] = new State(new int[]{30,-23,31,-23,32,-23,33,-23,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-23,27,-23,21,-23});
    states[27] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,28,-12,50});
    states[28] = new State(new int[]{30,-24,31,-24,32,-24,33,-24,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-24,27,-24,21,-24});
    states[29] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,30,-12,50});
    states[30] = new State(new int[]{30,-25,31,-25,32,-25,33,-25,34,-25,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-25,27,-25,21,-25});
    states[31] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,32,-12,50});
    states[32] = new State(new int[]{30,-26,31,-26,32,-26,33,-26,34,-26,35,-26,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-26,27,-26,21,-26});
    states[33] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,34,-12,50});
    states[34] = new State(new int[]{30,-27,31,-27,32,-27,33,-27,34,-27,35,-27,36,-27,37,35,38,37,39,39,40,41,41,43,42,45,9,-27,27,-27,21,-27});
    states[35] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,36,-12,50});
    states[36] = new State(new int[]{30,-28,31,-28,32,-28,33,-28,34,-28,35,-28,36,-28,37,-28,38,37,39,39,40,41,41,43,42,45,9,-28,27,-28,21,-28});
    states[37] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,38,-12,50});
    states[38] = new State(new int[]{30,-29,31,-29,32,-29,33,-29,34,-29,35,-29,36,-29,37,-29,38,-29,39,39,40,41,41,43,42,45,9,-29,27,-29,21,-29});
    states[39] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,40,-12,50});
    states[40] = new State(new int[]{30,-30,31,-30,32,-30,33,-30,34,-30,35,-30,36,-30,37,-30,38,-30,39,-30,40,41,41,43,42,45,9,-30,27,-30,21,-30});
    states[41] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,42,-12,50});
    states[42] = new State(new int[]{30,-31,31,-31,32,-31,33,-31,34,-31,35,-31,36,-31,37,-31,38,-31,39,-31,40,-31,41,43,42,45,9,-31,27,-31,21,-31});
    states[43] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,44,-12,50});
    states[44] = new State(new int[]{30,-32,31,-32,32,-32,33,-32,34,-32,35,-32,36,-32,37,-32,38,-32,39,-32,40,-32,41,-32,42,45,9,-32,27,-32,21,-32});
    states[45] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,46,-12,50});
    states[46] = new State(-33);
    states[47] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,48,-12,50});
    states[48] = new State(new int[]{27,49,30,21,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45});
    states[49] = new State(-17);
    states[50] = new State(-18);
    states[51] = new State(-34);
    states[52] = new State(-35);
    states[53] = new State(-36);
    states[54] = new State(-37);
    states[55] = new State(-19);
    states[56] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,57,-12,50});
    states[57] = new State(new int[]{30,-22,31,-22,32,-22,33,-22,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-22,27,-22,21,-22});
    states[58] = new State(-8);
    states[59] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,60,-12,50});
    states[60] = new State(new int[]{30,21,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,9,-38});
    states[61] = new State(-9);
    states[62] = new State(new int[]{4,63});
    states[63] = new State(-39);
    states[64] = new State(-10);
    states[65] = new State(new int[]{4,66});
    states[66] = new State(new int[]{29,67});
    states[67] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,68,-12,50});
    states[68] = new State(new int[]{21,69,30,21,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45});
    states[69] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,70,-12,50});
    states[70] = new State(new int[]{9,71,30,21,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45});
    states[71] = new State(new int[]{10,10,4,18,18,59,19,62,20,65,23,77,22,-41,9,-3},new int[]{-13,72,-3,74,-4,91,-5,9,-6,17,-7,58,-8,61,-9,64,-10,76});
    states[72] = new State(new int[]{22,73});
    states[73] = new State(-40);
    states[74] = new State(new int[]{9,75});
    states[75] = new State(new int[]{10,10,4,18,18,59,19,62,20,65,23,77,22,-42},new int[]{-4,8,-5,9,-6,17,-7,58,-8,61,-9,64,-10,76});
    states[76] = new State(-11);
    states[77] = new State(new int[]{28,78});
    states[78] = new State(new int[]{28,47,8,51,7,52,5,53,6,54,4,55,31,56},new int[]{-11,79,-12,50});
    states[79] = new State(new int[]{27,80,30,21,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45});
    states[80] = new State(new int[]{24,81});
    states[81] = new State(new int[]{9,82});
    states[82] = new State(new int[]{10,10,4,18,18,59,19,62,20,65,23,77,25,-44,26,-44,9,-3},new int[]{-14,83,-3,92,-4,91,-5,9,-6,17,-7,58,-8,61,-9,64,-10,76});
    states[83] = new State(new int[]{25,86,26,-46},new int[]{-15,84});
    states[84] = new State(new int[]{26,85});
    states[85] = new State(-43);
    states[86] = new State(new int[]{9,87});
    states[87] = new State(new int[]{10,10,4,18,18,59,19,62,20,65,23,77,26,-48,9,-3},new int[]{-16,88,-3,89,-4,91,-5,9,-6,17,-7,58,-8,61,-9,64,-10,76});
    states[88] = new State(-47);
    states[89] = new State(new int[]{9,90});
    states[90] = new State(new int[]{10,10,4,18,18,59,19,62,20,65,23,77,26,-49},new int[]{-4,8,-5,9,-6,17,-7,58,-8,61,-9,64,-10,76});
    states[91] = new State(-4);
    states[92] = new State(new int[]{9,93});
    states[93] = new State(new int[]{10,10,4,18,18,59,19,62,20,65,23,77,25,-45,26,-45},new int[]{-4,8,-5,9,-6,17,-7,58,-8,61,-9,64,-10,76});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{16,9,-3,9,17});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,9,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-4, new int[]{-7});
    rules[9] = new Rule(-4, new int[]{-8});
    rules[10] = new Rule(-4, new int[]{-9});
    rules[11] = new Rule(-4, new int[]{-10});
    rules[12] = new Rule(-5, new int[]{10,4,15,12});
    rules[13] = new Rule(-5, new int[]{10,4,15,14});
    rules[14] = new Rule(-5, new int[]{10,4,15,11});
    rules[15] = new Rule(-5, new int[]{10,4,15,13});
    rules[16] = new Rule(-6, new int[]{4,29,-11});
    rules[17] = new Rule(-11, new int[]{28,-11,27});
    rules[18] = new Rule(-11, new int[]{-12});
    rules[19] = new Rule(-11, new int[]{4});
    rules[20] = new Rule(-11, new int[]{-11,30,-11});
    rules[21] = new Rule(-11, new int[]{-11,31,-11});
    rules[22] = new Rule(-11, new int[]{31,-11});
    rules[23] = new Rule(-11, new int[]{-11,32,-11});
    rules[24] = new Rule(-11, new int[]{-11,33,-11});
    rules[25] = new Rule(-11, new int[]{-11,34,-11});
    rules[26] = new Rule(-11, new int[]{-11,35,-11});
    rules[27] = new Rule(-11, new int[]{-11,36,-11});
    rules[28] = new Rule(-11, new int[]{-11,37,-11});
    rules[29] = new Rule(-11, new int[]{-11,38,-11});
    rules[30] = new Rule(-11, new int[]{-11,39,-11});
    rules[31] = new Rule(-11, new int[]{-11,40,-11});
    rules[32] = new Rule(-11, new int[]{-11,41,-11});
    rules[33] = new Rule(-11, new int[]{-11,42,-11});
    rules[34] = new Rule(-12, new int[]{8});
    rules[35] = new Rule(-12, new int[]{7});
    rules[36] = new Rule(-12, new int[]{5});
    rules[37] = new Rule(-12, new int[]{6});
    rules[38] = new Rule(-7, new int[]{18,-11});
    rules[39] = new Rule(-8, new int[]{19,4});
    rules[40] = new Rule(-9, new int[]{20,4,29,-11,21,-11,9,-13,22});
    rules[41] = new Rule(-13, new int[]{});
    rules[42] = new Rule(-13, new int[]{-3,9});
    rules[43] = new Rule(-10, new int[]{23,28,-11,27,24,9,-14,-15,26});
    rules[44] = new Rule(-14, new int[]{});
    rules[45] = new Rule(-14, new int[]{-3,9});
    rules[46] = new Rule(-15, new int[]{});
    rules[47] = new Rule(-15, new int[]{25,9,-16});
    rules[48] = new Rule(-16, new int[]{});
    rules[49] = new Rule(-16, new int[]{-3,9});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> BEGIN, EOL, statementList, EOL, END
{program = ValueStack[ValueStack.Depth-3].statementList;}
        break;
      case 3: // statementList -> /* empty */
{if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}}
        break;
      case 4: // statementList -> statement
{	if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}
									CurrentSemanticValue.statementList.InsertFront(ValueStack[ValueStack.Depth-1].statement);
									
								}
        break;
      case 5: // statementList -> statementList, EOL, statement
{ ValueStack[ValueStack.Depth-3].statementList.Add(ValueStack[ValueStack.Depth-1].statement); CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-3].statementList; }
        break;
      case 6: // statement -> varDecl
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 7: // statement -> assignOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 8: // statement -> printOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 9: // statement -> inputOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 10: // statement -> forLoop
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 11: // statement -> ifCond
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 12: // varDecl -> DIM, IDENTIFIER, AS, INT
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Integer); CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 13: // varDecl -> DIM, IDENTIFIER, AS, DOUBLE
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Double);  CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 14: // varDecl -> DIM, IDENTIFIER, AS, BOOL
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Boolean); CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 15: // varDecl -> DIM, IDENTIFIER, AS, STRING
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.String);  CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 16: // assignOp -> IDENTIFIER, OP_ASSIGN, Expr
{CurrentSemanticValue.statement = new AssignmentStatement(symTable.GetID(ValueStack[ValueStack.Depth-3].String), ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 17: // Expr -> OP_LEFT_PAR, Expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-2].expr; }
        break;
      case 18: // Expr -> Literal
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 19: // Expr -> IDENTIFIER
{ CurrentSemanticValue.expr = new Expression(symTable.Get(ValueStack[ValueStack.Depth-1].String));}
        break;
      case 20: // Expr -> Expr, OP_ADD, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Add,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 21: // Expr -> Expr, OP_MINUS, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Sub,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 22: // Expr -> OP_MINUS, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.UnaryMinus,null,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 23: // Expr -> Expr, OP_MUL, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Mul,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 24: // Expr -> Expr, OP_DIV, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Div,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 25: // Expr -> Expr, OP_AND, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.And,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 26: // Expr -> Expr, OP_OR, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Or,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 27: // Expr -> Expr, OP_NOT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Not,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 28: // Expr -> Expr, OP_EQU, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Equ,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 29: // Expr -> Expr, OP_NOT_EQU, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.NotEqu,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 30: // Expr -> Expr, OP_LT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Lt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 31: // Expr -> Expr, OP_GT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Gt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 32: // Expr -> Expr, OP_GT_EQ, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.GtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 33: // Expr -> Expr, OP_LT_EQ, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.LtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 34: // Literal -> STRING_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].String);}
        break;
      case 35: // Literal -> BOOL_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Bool);}
        break;
      case 36: // Literal -> INTEGER_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Integer);}
        break;
      case 37: // Literal -> DOUBLE_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Double);}
        break;
      case 38: // printOp -> PRINT, Expr
{CurrentSemanticValue.statement = new PrintStatement(ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 39: // inputOp -> INPUT, IDENTIFIER
{CurrentSemanticValue.statement = new InputStatement(symTable.GetID(ValueStack[ValueStack.Depth-1].String));}
        break;
      case 40: // forLoop -> FOR, IDENTIFIER, OP_ASSIGN, Expr, TO, Expr, EOL, forBody, NEXT
{CurrentSemanticValue.statement = new ForStatement(symTable.Get(ValueStack[ValueStack.Depth-8].String) as SymbolTableIntegerElement, ValueStack[ValueStack.Depth-6].expr, ValueStack[ValueStack.Depth-4].expr, ValueStack[ValueStack.Depth-2].statementList);}
        break;
      case 41: // forBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 42: // forBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
      case 43: // ifCond -> IF, OP_LEFT_PAR, Expr, OP_RIGHT_PAR, THEN, EOL, ifBody, else, FI
{CurrentSemanticValue.statement = new IfCondStatement(ValueStack[ValueStack.Depth-7].expr,ValueStack[ValueStack.Depth-3].statementList,ValueStack[ValueStack.Depth-2].statementList);}
        break;
      case 44: // ifBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 45: // ifBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
      case 46: // else -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 47: // else -> ELSE, EOL, elseBody
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-1].statementList;}
        break;
      case 48: // elseBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 49: // elseBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
